QUESTION:
Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. 
Answers within 10-5 of the actual answer will be accepted.

LINK: https://leetcode.com/problems/average-of-levels-in-binary-tree/

SOLUTION: 
/**
My Approach:  first compute the no of levels in the binary tree. Then used  recursive dfs and level of each nodes to find the sum and count of nodes on each level.
Then finally computing average.

Better Approach: Simple apply bfs using queue. 
**/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findHeight(TreeNode* root){
        if(root==NULL)
            return 0;
        return max(findHeight(root->left), findHeight(root->right))+1;
    }
    
    void findNodes(TreeNode* root, vector<long> &sum,vector<long> &count,int levels){
        sum[levels-1] +=root->val;
        count[levels-1] +=1;
        if(root->left!=NULL)
          findNodes(root->left, sum, count, levels-1);
        if(root->right!=NULL)
            findNodes(root->right, sum, count, levels-1);
        return;
    }
    
    vector<double> averageOfLevels(TreeNode* root) {
        int levels = max(findHeight(root->left), findHeight(root->right))+1;
        vector<double> avgs;
        vector<long> sum(levels,0);
        vector<long> count(levels,0);
        sum[levels-1] +=root->val;
        count[levels-1] +=1;
        if(root->left!=NULL)
          findNodes(root->left, sum, count, levels-1);
        if(root->right!=NULL)
            findNodes(root->right, sum, count, levels-1);
        for(int i=levels-1;i>=0;--i){
            avgs.push_back(sum[i]/double(count[i]));
        }
        return avgs;
    }
};
