QUESTION:
Given an n-ary tree, return the level order traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).

LINK: https://leetcode.com/problems/n-ary-tree-level-order-traversal/



SOLUTION:
/* Approach: BFS using queue. 
1. create a temp_queue.
2. create a queue and push the root node in the queue.
3. if the queue is not empty then push the children of the front node of the queue in temp_queue if any and pop the node from the queue.
4. check if the queue is empty and temp_queue is not empty. 
   If yes then pop them out , print/save the val and push node in the queue as well and repeat the step3. 

*/


/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/


class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>> res;
        vector<int> v;
        queue <Node*> q;
        if(root!=NULL){
            q.push(root);
            res.push_back({root->val});
        }
        queue<Node*> q_temp;
        while(!q.empty()){
            Node* node = q.front();
            for(auto i : node->children) {q_temp.push(i);}
            q.pop();
            if(q.empty()&& !q_temp.empty()){  
                while(!q_temp.empty()){
                    q.push(q_temp.front());
                    v.push_back(q_temp.front()->val);
                    q_temp.pop();
                } 
                res.push_back(v);
                v.clear();
            }
            
        }
        return res;
        
    }
};
