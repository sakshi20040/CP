QUESTION:
Given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.

Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.
https://leetcode.com/problems/construct-string-from-binary-tree/

APPROACH: recursive DFS.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void preorder(TreeNode* node, string &res){
        res += to_string(node->val);
        if(node->left!=NULL){
            res+="(";
            preorder(node->left,res);
            res+=")";
        }
        if (node->left==NULL && node->right!=NULL)
            res+="()";
        if(node->right!=NULL){
            res+="(";
            preorder(node->right,res);
            res+=")";
        }
        return;
        
    }
    
    string tree2str(TreeNode* root) {
        string res;
        if(root!=NULL){
            preorder(root,res);
        }
            return res;   
    }
};
