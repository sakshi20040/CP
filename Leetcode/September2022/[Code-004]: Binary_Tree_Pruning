Question:
https://leetcode.com/problems/n-ary-tree-level-order-traversal/
Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.

A subtree of a node node is node plus every node that is a descendant of node. (tree has only 0 and 1 as values).

QUESTION:

SOLUTION:
Approcach:  Using recursive approach of DFS.
Function findNoOneTree  => true when node child does not have any 1 in it.

Base condition: node== leafnode and node->val ==0 return true;

if the findNoOneTree(node->left) returns true  then node->left=NULL
if the findNoOneTree(node->right) returns true then node->right=NULL

if the current node now has no left and right child (now the node itself has become leaf node) and node->val==0 then return true.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool findNoOneTree(TreeNode* node){
        if(node->left==NULL && node->right==NULL){
            if(node->val == 0)
                return true;
            return false;
        }
        bool val1, val2;
        if(node->left!=NULL) 
           val1 = findNoOneTree(node->left);
        if(node->right!=NULL)
           val2 =  findNoOneTree(node->right);
        
        if(val1 == true)
            node->left = NULL;
        
        if (val2 == true)
            node->right = NULL;
        
        if(node->left==NULL && node->right == NULL && node->val==0)
            return true;
        return false;
        
    }
    
    TreeNode* pruneTree(TreeNode* root) {
        if(root == NULL)
            return root;
        bool val  = findNoOneTree(root);
        if(val==true)
            root = NULL;
        return root;
    }
};
