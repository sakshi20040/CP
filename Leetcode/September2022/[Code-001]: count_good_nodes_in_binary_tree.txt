
QUESTION: 
Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.
Return the number of good nodes in the binary tree.

CONSTRAINTS:
The number of nodes in the binary tree is in the range [1, 10^5].
Each node's value is between [-10^4, 10^4].

LINK: https://leetcode.com/problems/count-good-nodes-in-binary-tree


SOLUTION

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
class Solution {
public:
    void findcount(TreeNode* root, int max_ele, int &count){

        if(root->val >= max_ele){
             max_ele = root->val, ++count;   
        }
        if(root->left != NULL){
            findcount(root->left, max_ele, count);
        }
           
        if(root->right != NULL){
            findcount(root->right, max_ele, count);
        }
           
        return;   
    }
    
    int goodNodes(TreeNode* root) {
        int count =1;
        int max_ele = root->val;
        int pindex=0;
        
        if(root->left!= NULL){  
           findcount(root->left, max_ele, count);
        }
        if(root->right!= NULL){
           findcount(root->right, max_ele, count);
        }
        return count;
    }
};
