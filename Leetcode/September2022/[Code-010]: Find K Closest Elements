Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.

An integer a is closer to x than an integer b if:

|a - x| < |b - x|, or
|a - x| == |b - x| and a < b

https://leetcode.com/problems/find-k-closest-elements/



class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        /* create absolute difference vector and find the index having its absolute value 
           closest to x;
           create an visited array with default val 0.
           then used 2 pointer approach with marking the index as visited whose value will            be part of the final result vector
        */
        vector<int> diff_arr;
        int n =arr.size();
        vector<int> visited(n,0);
        int index = 0;
        for(int i=0;i<arr.size();++i){
            diff_arr.push_back(abs(arr[i]-x));
            if(diff_arr[i]<diff_arr[index])
                index= i;
        }
        
        int count =1;
        visited[index] =1;
        int l = index-1;
        int r = index+1;
        while(count!=k && l>=0 && r<n){
           if(diff_arr[l]<=diff_arr[r]){
                visited[l]=1;l--;
           }
           else{
                visited[r] =1;r++; 
           }
           ++count;
        }
        while(count!=k && l<0 && r<n){
            visited[r]=1; ++r; count++;
        }
        while(count!=k && r>=n && l>=0){
            visited[l]=1;l--; count++;
        }
        vector<int> res;
        for(int i=0;i<n;++i){
            if(visited[i]==1)
            res.push_back(arr[i]);
        }
        return res;
    }
};
